# Copyright (C) 2014 - 2024 by the authors of the ASPECT code.
#
# This file is part of ASPECT.
#
# ASPECT is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# ASPECT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ASPECT; see the file LICENSE.  If not see
# <http://www.gnu.org/licenses/>.


# This file provides a macro that authors can use to
# set up a directory with source files that will then be
# compiled into a run-time loadable plugin for Aspect.


find_package(deal.II 9.5.0 QUIET REQUIRED HINTS @DEAL_II_PATH@ @deal.II_DIR@ NO_DEFAULT_PATH)
set(Aspect_INCLUDE_DIRS "@ASPECT_INCLUDE_DIRS@")
set(Aspect_VERSION "@ASPECT_PACKAGE_VERSION@")
set(Aspect_DIR "@CONFIG_DIR@")

set(ASPECT_WITH_FASTSCAPE "@ASPECT_WITH_FASTSCAPE@")
set(ASPECT_WITH_PYTHON "@ASPECT_WITH_PYTHON@")

# Import information about the World Builder installation
set(ASPECT_WITH_WORLD_BUILDER "@ASPECT_WITH_WORLD_BUILDER@")
set(WORLD_BUILDER_VERSION "@WORLD_BUILDER_VERSION@")
set(WORLD_BUILDER_SOURCE_DIR "@WORLD_BUILDER_SOURCE_DIR@")

# force our build type to the one that is used by ASPECT:
set(ASPECT_BUILD_DEBUG "@ASPECT_BUILD_DEBUG@")
set(ASPECT_BUILD_RELEASE "@ASPECT_BUILD_RELEASE@")


macro(ASPECT_SETUP_PLUGIN _target)
  message(STATUS "Setting up plugin:")
  message(STATUS "  name <${_target}>")
  message(STATUS "  using ASPECT_DIR ${Aspect_DIR}")

  # deal.II versions >=9.5 disable deprecation warnings in user code. Enable
  # the warnings again by removing the flag that disables them.
  string(REPLACE "-Wno-deprecated-declarations" "" DEAL_II_WARNING_FLAGS "${DEAL_II_WARNING_FLAGS}")

  # We create lib${_target}.debug.so, lib${_target}.release.so, or both
  # depending on the compilation mode of ASPECT. Note that the user already
  # created the target under the name ${_target}, so we only need to create
  # a second target in the third case above.
  # Note that you can not rename a target or change its filename, but you can
  # modify the suffix. :-)

  if(${ASPECT_BUILD_DEBUG} MATCHES "ON")
    message(STATUS "  setting up DEBUG variant")
    deal_ii_setup_target(${_target} DEBUG)
    set_target_properties(${_target} PROPERTIES SUFFIX ".debug.so")

    if(WORLD_BUILDER_VERSION VERSION_GREATER_EQUAL 0.6.0 AND ASPECT_WITH_WORLD_BUILDER)
      # Add those WorldBuilder include directories to the include
      # directory list that are specific to the build (debug or
      # release):
      target_include_directories(${_target} PRIVATE
        "${WORLD_BUILDER_SOURCE_DIR}/include/"
        "${Aspect_DIR}/world_builder/include/")
    endif()

    list(APPEND _target_libs ${_target})
  endif()

  if(${ASPECT_BUILD_RELEASE} MATCHES "ON")
    message(STATUS "  setting up RELEASE variant")

    # If we also build a debug build we need to set up a
    # new target. If we do not also build in debug mode
    # reuse the target name the user already set. In
    # both cases make sure the library ends in .release.so
    if(${ASPECT_BUILD_DEBUG} MATCHES "ON")
      set(_release_target_name ${_target}.release)
      add_library(${_release_target_name} SHARED $<TARGET_PROPERTY:${_target},SOURCES>)
      deal_ii_setup_target(${_release_target_name} RELEASE)
      set_target_properties(${_release_target_name} PROPERTIES SUFFIX ".so")
    else()
      set(_release_target_name ${_target})
      deal_ii_setup_target(${_release_target_name} RELEASE)
      set_target_properties(${_release_target_name} PROPERTIES SUFFIX ".release.so")
    endif()

    if(WORLD_BUILDER_VERSION VERSION_GREATER_EQUAL 0.6.0 AND ASPECT_WITH_WORLD_BUILDER)
      # Add those WorldBuilder include directories to the include
      # directory list that are specific to the build (debug or
      # release):
      target_include_directories(${_release_target_name} PRIVATE
        "${WORLD_BUILDER_SOURCE_DIR}/include/"
        "${Aspect_DIR}/world_builder_release/include/")
    endif()

    list(APPEND _target_libs ${_release_target_name})
  endif()

  foreach(_T ${_target_libs})
    target_include_directories(${_T} PRIVATE ${Aspect_INCLUDE_DIRS})
    if (ASPECT_WITH_PYTHON)
      target_link_libraries(${_T} ${Python3_LIBRARIES})
    endif()
    set_property(TARGET ${_T} PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)
  endforeach()

  file(RELATIVE_PATH _relative_path ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_LIST_DIR})

  install(TARGETS ${_target_libs}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/${_relative_path}
    COMPONENT examples)

  # workarounds for MAC OSX
  IF (APPLE)
    # avoid linker errors about missing functions inside ASPECT:
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
  endif()

  # automatically create a symbolic link to aspect in the current directory:
  add_custom_command(
    TARGET ${_target} POST_BUILD
    COMMAND ln -sf ${Aspect_DIR}/aspect .)

  if(${ASPECT_BUILD_DEBUG} MATCHES "ON")
    add_custom_command(
      TARGET ${_target} POST_BUILD
      COMMAND ln -sf ${Aspect_DIR}/aspect-debug .)
  endif()

  if(${ASPECT_BUILD_RELEASE} MATCHES "ON")
  add_custom_command(
    TARGET ${_target} POST_BUILD
    COMMAND ln -sf ${Aspect_DIR}/aspect-release .)
  endif()

endmacro()
