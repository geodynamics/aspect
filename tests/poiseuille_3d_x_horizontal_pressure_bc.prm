# Like the poiseuille_2d_horizontal_pressure_bc.prm test,
# but in 3d.

set Dimension = 3
set CFL number                             = 1.0
set End time                               = 0
set Start time                             = 0
set Adiabatic surface temperature          = 0
set Surface pressure                       = 0
set Use years instead of seconds           = false
set Nonlinear solver scheme                = single Advection, single Stokes

subsection Boundary temperature model
  set List of model names = box
  set Fixed temperature boundary indicators   = 0, 1

  subsection Box
    set Left temperature = 0
  end
end

subsection Gravity model
  set Model name = vertical

  subsection Vertical
    set Magnitude = 0
  end
end

subsection Geometry model
  set Model name = box

  subsection Box
    set X extent = 2
    set Y extent = 1
    set Z extent = 1
  end
end

subsection Initial temperature model
  set Model name = function

  subsection Function
    set Function expression = 0
  end
end

subsection Material model
  set Model name = simple

  subsection Simple model
    set Reference density             = 1
    set Reference specific heat       = 1
    set Reference temperature         = 1
    set Thermal conductivity          = 0
    set Thermal expansion coefficient = 0
    set Viscosity                     = 1
  end
end

subsection Mesh refinement
  set Initial adaptive refinement        = 0
  set Initial global refinement          = 2
end

subsection Boundary traction model
  # Prescribe a horizontal traction on the vertical boundaries
  set Prescribed traction boundary indicators = 0 x: function, 1 x: function

  subsection Function
    set Variable names = x,y,z

    # We want to prescribe a pressure of 2 at the left boundary
    # and -2 at the right boundary.
    # The traction in this case is defined as:
    # tau =  - pressure * normal_vector.
    # On the left boundary, the outward pointing normal vector is
    # (-1;0;0). On the right (1;0;0).
    # Therefore:
    # Left boundary:  tau = - pressure(left) (-1;0;0) = - (2) (-1;0;0) = (2;0;0).
    # Right boundary: tau = - pressure(right) (1;0;0) = - (-2) (1;0;0) = (2;0;0).
    # Conveniently, the traction is the same on both boundaries.
    set Function expression = 2;0;0
  end
end

subsection Boundary velocity model
  # Prescribe zero y and z velocity components on the vertical boundaries
  set Prescribed velocity boundary indicators = 0 yz: function, 1 yz: function
  set Zero velocity boundary indicators       = 2, 3, 4, 5

  subsection Function
    set Variable names = x,y,z
    set Function expression = 0;0;0
  end
end

subsection Postprocess
  set List of postprocessors = velocity statistics, pressure statistics, mass flux statistics
end
