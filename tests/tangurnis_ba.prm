# TanGurnis BA benchmark

set Additional shared libraries            = ./code/libtangurnis.so

# At the top, state that the program should be run for a two-dimensional
# simulation
set Dimension = 2

# In computations, the time step $k$ is chosen according to $k = c \min_K
# \frac{h_K}{\|u\|_{\infty,K} p_T}$ where $h_K$ is the diameter of cell $K$,
# and the denominator is the maximal magnitude of the velocity on cell $K$
# times the polynomial degree $p_T$ of the temperature discretization. The
# dimensionless constant $c$ is called the CFL number in this program. For
# time discretizations that have explicit components, $c$ must be less than a
# constant that depends on the details of the time discretization and that is
# no larger than one. On the other hand, for implicit discretizations such as
# the one chosen here, one can choose the time step as large as one wants (in
# particular, one can choose $c>1$) though a CFL number significantly larger
# than one will yield rather diffusive solutions. Units: None.
set CFL number                             = 1.0

# The end time of the simulation. Units: years if the 'Use years in output
# instead of seconds' parameter is set; seconds otherwise.
set End time                               = 0.0001
set Nonlinear solver scheme                = no Advection, iterated Stokes

# The name of the directory into which all output files should be placed. This
# may be an absolute or a relative path.
set Output directory                       = output

# A flag indicating whether the computation should be resumed from a
# previously saved state (if true) or start from scratch (if false).
set Resume computation                     = false

# The start time of the simulation. Units: years if the 'Use years in output
# instead of seconds' parameter is set; seconds otherwise.
set Start time                             = 0

# In order to make the problem in the first time step easier to solve, we need
# a reasonable guess for the temperature and pressure. To obtain it, we use an
# adiabatic pressure and temperature field. This parameter describes what the
# `adiabatic' temperature would be at the surface of the domain (i.e. at depth
# zero). Note that this value need not coincide with the boundary condition
# posed at this point. Rather, the boundary condition may differ significantly
# from the adiabatic value, and then typically induce a thermal boundary
# layer.
# For more information, see the section in the manual that discusses the
# general mathematical model.
set Adiabatic surface temperature          = 0

# The mathematical equations that describe thermal convection only determine
# the pressure up to an arbitrary constant. On the other hand, for comparison
# and for looking up material parameters it is important that the pressure be
# normalized somehow. We do this by enforcing a particular average pressure
# value at the surface of the domain, where the geometry model determines
# where the surface is. This parameter describes what this average surface
# pressure value is supposed to be. By default, it is set to zero, but one may
# want to choose a different value for example for simulating only the volume
# of the mantle below the lithosphere, in which case the surface pressure
# should be the lithostatic pressure at the bottom of the lithosphere.
# For more information, see the section in the manual that discusses the
# general mathematical model.
set Surface pressure                       = 0

# When computing results for mantle convection simulations, it is often
# difficult to judge the order of magnitude of results when they are stated in
# MKS units involving seconds. Rather, some kinds of results such as
# velocities are often stated in terms of meters per year (or, sometimes,
# centimeters per year). On the other hand, for non-dimensional computations,
# one wants results in their natural unit system as used inside the code. If
# this flag is set to 'true' conversion to years happens; if it is 'false', no
# such conversion happens.
set Use years instead of seconds           = false

subsection Adiabatic conditions model
  set Model name = function

  subsection Function
    set Function constants  = Di=0.0, gamma=1.0
    set Function expression = 0;0;exp(Di/gamma*depth)  # T,p,rho
    set Variable names      = depth
  end
end

subsection Formulation
  set Formulation = Boussinesq approximation

  #set Mass conservation        = incompressible
  #set Temperature equation     = reference density profile
end

subsection Boundary temperature model
  set List of model names = Tan Gurnis

  # A comma separated list of integers denoting those boundaries on which the
  # temperature is fixed and described by the boundary temperature object
  # selected in its own section of this input file. All boundary indicators
  # used by the geometry but not explicitly listed here will end up with
  # no-flux (insulating) boundary conditions.
  set Fixed temperature boundary indicators   = left, right, bottom, top
end

subsection Discretization
  # The polynomial degree to use for the velocity variables in the Stokes
  # system. Units: None.
  set Stokes velocity polynomial degree       = 2

  # The polynomial degree to use for the temperature variable. Units: None.
  set Temperature polynomial degree           = 2

  # Whether to use a Stokes discretization that is locally conservative at the
  # expense of a larger number of degrees of freedom (true), or to go with a
  # cheaper discretization that does not locally conserve mass, although it is
  # globally conservative (false).
  set Use locally conservative discretization = false

  subsection Stabilization parameters
    # The exponent $\alpha$ in the entropy viscosity stabilization. Units:
    # None.
    set alpha = 2

    # The $\beta$ factor in the artificial viscosity stabilization. An
    # appropriate value for 2d is 0.052 and 0.078 for 3d. Units: None.
    set beta  = 0.078

    # The $c_R$ factor in the entropy viscosity stabilization. Units: None.
    set cR    = 0.5
  end
end

subsection Geometry model
  set Model name = box

  subsection Box
    # Extent of the box in x-direction. Units: \\si{\\meter}.
    set X extent = 1

    # Extent of the box in y-direction. Units: \\si{\\meter}.
    set Y extent = 1

    # Extent of the box in z-direction. This value is ignored if the
    # simulation is in 2d Units: \\si{\\meter}.
    set Z extent = 1
  end
end

subsection Gravity model
  set Model name = vertical
end

subsection Initial temperature model
  set Model name = function

  subsection Function
    set Function expression = sin(pi*y)*cos(pi*1*x)
  end
end

subsection Material model
  set Model name = Tan Gurnis

  subsection Tan Gurnis model
    set Di                            = 0
    set gamma                         = 1 # infinity really, but does not matter
    set a                             = 0
    set wavenumber                    = 1
  end
end

subsection Mesh refinement
  set Initial adaptive refinement        = 0
  set Initial global refinement          = 4

  # The method used to determine which cells to refine and which to coarsen.
  set Strategy                           = thermal energy density
  set Time steps between mesh refinement = 100
end

subsection Boundary velocity model
  # A comma separated list of integers denoting those boundaries on which the
  # velocity is tangential and unrestrained, i.e., where no external forces
  # act to prescribe a particular tangential velocity (although there is a
  # force that requires the flow to be tangential).
  set Tangential velocity boundary indicators = left, right, bottom, top
end

subsection Postprocess
  # A comma separated list of postprocessor objects that should be run at the
  # end of each time step. Some of these postprocessors will declare their own
  # parameters which may, for example, include that they will actually do
  # something only every so many time steps or years. Alternatively, the text
  # 'all' indicates that all available postprocessors should be run after each
  # time step.
  #
  # The following postprocessors are available:
  #
  # `depth average': A postprocessor that computes depth averaged quantities
  # and writes them out.
  #
  # `heat flux statistics': A postprocessor that computes some statistics
  # about the heat flux across boundaries.
  #
  # `heat flux statistics for the table model': A postprocessor that computes
  # some statistics about the heat flux across boundaries.
  #
  # `velocity statistics for the table model': A postprocessor that computes
  # some statistics about the velocity field.
  #
  # `temperature statistics': A postprocessor that computes some statistics
  # about the temperature field.
  #
  # `velocity statistics': A postprocessor that computes some statistics about
  # the velocity field.
  #
  # `visualization': A postprocessor that takes the solution and writes it
  # into files that can be read by a graphical visualization program.
  # Additional run time parameters are read from the parameter subsection
  # 'Visualization'.
  set List of postprocessors = Tan Gurnis error, visualization

  subsection Depth average
    # The time interval between each generation of graphical output files. A
    # value of zero indicates that output should be generated in each time
    # step. Units: years if the 'Use years instead of seconds          '
    # parameter is set; seconds otherwise.
    set Time between graphical output = 1e8
  end

  subsection Visualization
    set Interpolate output = false

    # VTU file output supports grouping files from several CPUs into one file
    # using MPI I/O when writing on a parallel filesystem. Select 0 for no
    # grouping. This will disable parallel file output and instead write one
    # file per processor in a background thread. A value of 1 will generate
    # one big file containing the whole solution.
    set Number of grouped files       = 0

    # The file format to be used for graphical output.
    set Output format                 = vtu

    # The time interval between each generation of graphical output files. A
    # value of zero indicates that output should be generated in each time
    # step. Units: years if the 'Use years instead of seconds          '
    # parameter is set; seconds otherwise.
    set Time between graphical output = 0
  end
end
